CMAKE_MINIMUM_REQUIRED( VERSION 3.0 )
PROJECT(glinfo VERSION 0.9.0 LANGUAGES C)

SET(MAJOR 0)
SET(MINOR 9)
SET(PATCH 0)
SET(STATE a)
SET(VERSION ${MAJOR}.${MINOR}${STATE}${PATCH} )
ADD_DEFINITIONS(-DGLIF_VERSION="${VERSION}")

# gcc compiler flags
IF((CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX) AND NOT CMAKE_COMPILER_IS_MINGW)
  	IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8) # -fPIC is only required
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	ENDIF()

	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS( -DNDEBUG )
		ADD_DEFINITIONS( -O2 )
		SET(CMAKE_RELEASE TRUE)
	ELSE()
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS( -D_DEBUG )
		ADD_DEFINITIONS( -g3 -O0 )
		SET(CMAKE_DEBUG TRUE)
	ENDIF()
endif()

FILE(GLOB source ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c
		${CMAKE_CURRENT_SOURCE_DIR}/src/argument.c)

# Windows context source file.
IF (WIN32)
	FILE(GLOB glsrc ${CMAKE_CURRENT_SOURCE_DIR}/src/wgl_context.c )
	SET(GLINFO_LIBRARIES STRIP "")
ENDIF (WIN32)

# Unix context source file.
IF(UNIX)
	FILE(GLOB glsrc ${CMAKE_CURRENT_SOURCE_DIR}/src/glx_context.c)
	SET(GLINFO_LIBRARIES "-lX11")
ENDIF (UNIX)

SET(OpenGL_GL_PREFERENCE "GLVND")
FIND_PACKAGE(OpenGL)
IF(OPENGL_FOUND)
    MESSAGE(STATUS "OpenGL found: ${OPENGL_LIBRARIES}.")
ENDIF()

#
ADD_EXECUTABLE(glinfo ${source} ${glsrc})
TARGET_LINK_LIBRARIES(glinfo GL ${GLINFO_LIBRARIES} ${OPENGL_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(glinfo PRIVATE ${OPENGL_INCLUDE_DIR})
INSTALL(TARGETS glinfo DESTINATION bin)

IF( UNIX )	
	SET( TARGETDIR "${PROJECT_NAME}-${VERSION}")
	ADD_CUSTOM_TARGET(	distribution
				COMMAND mkdir -p ${TARGETDIR}
				COMMAND cp -r src CMakeLists.txt LICENSE ${TARGETDIR}
				COMMAND tar cf - ${TARGETDIR} | gzip -c > ${TARGETDIR}.tar.gz 
				COMMAND rm -r ${TARGETDIR} )
ENDIF()
